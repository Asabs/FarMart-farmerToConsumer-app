import 'bloc/signup_page_bloc.dart';import 'models/signup_page_model.dart';import 'package:farmmart/core/app_export.dart';import 'package:farmmart/core/utils/validation_functions.dart';import 'package:farmmart/widgets/custom_checkbox_button.dart';import 'package:farmmart/widgets/custom_icon_button.dart';import 'package:farmmart/widgets/custom_text_form_field.dart';import 'package:flutter/material.dart';
// ignore_for_file: must_be_immutable
class SignupPageScreen extends StatelessWidget {SignupPageScreen({Key? key}) : super(key: key);

GlobalKey<FormState> _formKey = GlobalKey<FormState>();

static Widget builder(BuildContext context) { return BlocProvider<SignupPageBloc>(create: (context) => SignupPageBloc(SignupPageState(signupPageModelObj: SignupPageModel()))..add(SignupPageInitialEvent()), child: SignupPageScreen()); } 
@override Widget build(BuildContext context) { mediaQueryData = MediaQuery.of(context); return SafeArea(child: Scaffold(backgroundColor: theme.colorScheme.onPrimary.withOpacity(1), resizeToAvoidBottomInset: false, body: Form(key: _formKey, child: SizedBox(width: double.maxFinite, child: Column(mainAxisAlignment: MainAxisAlignment.start, children: [Container(height: getSize(170), width: getSize(170), margin: getMargin(top: 80), decoration: BoxDecoration(color: theme.colorScheme.onPrimary.withOpacity(1), borderRadius: BorderRadius.circular(getHorizontalSize(85)), border: Border.all(color: appTheme.lime900, width: getHorizontalSize(26)))), Container(margin: getMargin(top: 46), padding: getPadding(left: 42, top: 2, right: 42, bottom: 2), decoration: AppDecoration.fill1.copyWith(borderRadius: BorderRadiusStyle.customBorderTL30), child: Column(mainAxisSize: MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start, mainAxisAlignment: MainAxisAlignment.start, children: [Align(alignment: Alignment.center, child: Text("msg_create_your_account".tr, overflow: TextOverflow.ellipsis, textAlign: TextAlign.left, style: CustomTextStyles.titleLargePoppinsOnPrimary)), Padding(padding: getPadding(left: 3, top: 31), child: RichText(text: TextSpan(children: [TextSpan(text: "lbl_full_name2".tr, style: CustomTextStyles.bodySmallPoppinsOnPrimary), TextSpan(text: "lbl".tr, style: CustomTextStyles.bodySmallPoppinsDeeporangeA400)]), textAlign: TextAlign.left)), BlocSelector<SignupPageBloc, SignupPageState, TextEditingController?>(selector: (state) => state.fullnameoneController, builder: (context, fullnameoneController) {return CustomTextFormField(controller: fullnameoneController, margin: getMargin(left: 3, top: 4, right: 8), contentPadding: getPadding(left: 20, top: 10, right: 20, bottom: 10), textStyle: theme.textTheme.labelSmall!, hintText: "lbl_steven_stallion".tr, hintStyle: theme.textTheme.labelSmall!, textInputAction: TextInputAction.next, filled: true, fillColor: theme.colorScheme.onPrimary.withOpacity(1), defaultBorderDecoration: TextFormFieldStyleHelper.outlineBluegray10001, enabledBorderDecoration: TextFormFieldStyleHelper.outlineBluegray10001, focusedBorderDecoration: TextFormFieldStyleHelper.outlineBluegray10001, disabledBorderDecoration: TextFormFieldStyleHelper.outlineBluegray10001);}), Padding(padding: getPadding(left: 3, top: 19), child: RichText(text: TextSpan(children: [TextSpan(text: "lbl_email2".tr, style: CustomTextStyles.bodySmallPoppinsOnPrimary), TextSpan(text: "lbl".tr, style: CustomTextStyles.bodySmallPoppinsDeeporangeA400)]), textAlign: TextAlign.left)), BlocSelector<SignupPageBloc, SignupPageState, TextEditingController?>(selector: (state) => state.emailoneController, builder: (context, emailoneController) {return CustomTextFormField(controller: emailoneController, margin: getMargin(left: 3, top: 5, right: 8), contentPadding: getPadding(left: 20, top: 10, right: 20, bottom: 10), textStyle: theme.textTheme.labelSmall!, hintText: "msg_example_gmail_com".tr, hintStyle: theme.textTheme.labelSmall!, textInputAction: TextInputAction.next, textInputType: TextInputType.emailAddress, validator: (value) {if (value == null || (!isValidEmail(value, isRequired: true))) {return "Please enter valid email";} return null;}, filled: true, fillColor: theme.colorScheme.onPrimary.withOpacity(1), defaultBorderDecoration: TextFormFieldStyleHelper.outlineBluegray10001, enabledBorderDecoration: TextFormFieldStyleHelper.outlineBluegray10001, focusedBorderDecoration: TextFormFieldStyleHelper.outlineBluegray10001, disabledBorderDecoration: TextFormFieldStyleHelper.outlineBluegray10001);}), Padding(padding: getPadding(left: 3, top: 19), child: RichText(text: TextSpan(children: [TextSpan(text: "lbl_password2".tr, style: CustomTextStyles.bodySmallPoppinsOnPrimary), TextSpan(text: "lbl".tr, style: CustomTextStyles.bodySmallPoppinsDeeporangeA400)]), textAlign: TextAlign.left)), BlocBuilder<SignupPageBloc, SignupPageState>(builder: (context, state) {return CustomTextFormField(controller: state.passwordoneController, margin: getMargin(left: 3, top: 4, right: 8), contentPadding: getPadding(left: 20, top: 10, bottom: 10), textStyle: theme.textTheme.labelSmall!, hintText: "lbl2".tr, hintStyle: theme.textTheme.labelSmall!, textInputType: TextInputType.visiblePassword, suffix: InkWell(onTap: () {context.read<SignupPageBloc>().add(ChangePasswordVisibilityEvent(value: !state.isShowPassword));}, child: Container(margin: getMargin(left: 30, top: 11, right: 15, bottom: 11), child: CustomImageView(svgPath: state.isShowPassword ? ImageConstant.imgAlarm : ImageConstant.imgAlarm))), suffixConstraints: BoxConstraints(maxHeight: getVerticalSize(35)), validator: (value) {if (value == null || (!isValidPassword(value, isRequired: true))) {return "Please enter valid password";} return null;}, obscureText: state.isShowPassword, filled: true, fillColor: theme.colorScheme.onPrimary.withOpacity(1), defaultBorderDecoration: TextFormFieldStyleHelper.outlineBluegray10001, enabledBorderDecoration: TextFormFieldStyleHelper.outlineBluegray10001, focusedBorderDecoration: TextFormFieldStyleHelper.outlineBluegray10001, disabledBorderDecoration: TextFormFieldStyleHelper.outlineBluegray10001);}), BlocSelector<SignupPageBloc, SignupPageState, bool?>(selector: (state) => state.isCheckbox, builder: (context, isCheckbox) {return CustomCheckboxButton(text: "msg_i_agree_to_the_terms".tr, iconSize: getHorizontalSize(10), value: isCheckbox, margin: getMargin(left: 3, top: 5), textStyle: CustomTextStyles.poppinsOnPrimary, onChange: (value) {context.read<SignupPageBloc>().add(ChangeCheckBoxEvent(value: value));});}), Container(height: getVerticalSize(13), width: getHorizontalSize(267), margin: getMargin(left: 3, top: 11), child: Stack(alignment: Alignment.topLeft, children: [Align(alignment: Alignment.topCenter, child: BlocSelector<SignupPageBloc, SignupPageState, bool?>(selector: (state) => state.isCheckbox1, builder: (context, isCheckbox1) {return CustomCheckboxButton(alignment: Alignment.topCenter, width: getHorizontalSize(228), text: "lbl_farmer".tr, iconSize: getHorizontalSize(10), value: isCheckbox1, textStyle: CustomTextStyles.poppinsOnPrimary, isRightCheck: true, onChange: (value) {context.read<SignupPageBloc>().add(ChangeCheckBox1Event(value: value));});})), Align(alignment: Alignment.topLeft, child: BlocSelector<SignupPageBloc, SignupPageState, bool?>(selector: (state) => state.isCheckbox2, builder: (context, isCheckbox2) {return CustomCheckboxButton(alignment: Alignment.topLeft, text: "lbl_farmer".tr, iconSize: getHorizontalSize(10), value: isCheckbox2, textStyle: CustomTextStyles.poppinsOnPrimary, onChange: (value) {context.read<SignupPageBloc>().add(ChangeCheckBox2Event(value: value));});})), Align(alignment: Alignment.bottomRight, child: BlocSelector<SignupPageBloc, SignupPageState, bool?>(selector: (state) => state.isCheckbox3, builder: (context, isCheckbox3) {return CustomCheckboxButton(alignment: Alignment.bottomRight, text: "lbl_user".tr, iconSize: getHorizontalSize(10), value: isCheckbox3, textStyle: CustomTextStyles.poppinsOnPrimary, onChange: (value) {context.read<SignupPageBloc>().add(ChangeCheckBox3Event(value: value));});}))])), CustomIconButton(height: 33, width: 106, margin: getMargin(top: 9), alignment: Alignment.center, onTap: () {Nav(context);}, child: CustomImageView(svgPath: ImageConstant.imgExcludeOnprimary)), Padding(padding: getPadding(top: 24, right: 5), child: Row(mainAxisAlignment: MainAxisAlignment.spaceBetween, crossAxisAlignment: CrossAxisAlignment.end, children: [Padding(padding: getPadding(top: 7, bottom: 6), child: SizedBox(width: getHorizontalSize(126), child: Divider(height: getVerticalSize(1), thickness: getVerticalSize(1), color: appTheme.blueGray100))), Text("lbl_or".tr, overflow: TextOverflow.ellipsis, textAlign: TextAlign.left, style: CustomTextStyles.labelSmallBluegray100), Padding(padding: getPadding(top: 7, bottom: 6), child: SizedBox(width: getHorizontalSize(126), child: Divider(height: getVerticalSize(1), thickness: getVerticalSize(1), color: appTheme.blueGray100)))])), Align(alignment: Alignment.center, child: Padding(padding: getPadding(top: 15), child: Row(mainAxisAlignment: MainAxisAlignment.center, children: [Card(clipBehavior: Clip.antiAlias, elevation: 0, margin: EdgeInsets.all(0), color: theme.colorScheme.onPrimary.withOpacity(1), shape: RoundedRectangleBorder(borderRadius: BorderRadiusStyle.roundedBorder8), child: Container(height: getVerticalSize(31), width: getHorizontalSize(35), padding: getPadding(left: 10, top: 8, right: 10, bottom: 8), decoration: AppDecoration.outline.copyWith(borderRadius: BorderRadiusStyle.roundedBorder8), child: Stack(children: [CustomImageView(svgPath: ImageConstant.imgFlatcoloriconsgoogle, height: getSize(14), width: getSize(14), alignment: Alignment.center)]))), Card(clipBehavior: Clip.antiAlias, elevation: 0, margin: getMargin(left: 18), color: theme.colorScheme.onPrimary.withOpacity(1), shape: RoundedRectangleBorder(borderRadius: BorderRadiusStyle.roundedBorder8), child: Container(height: getVerticalSize(31), width: getHorizontalSize(35), padding: getPadding(left: 11, top: 8, right: 11, bottom: 8), decoration: AppDecoration.outline1.copyWith(borderRadius: BorderRadiusStyle.roundedBorder8), child: Stack(children: [CustomImageView(svgPath: ImageConstant.imgUser, height: getVerticalSize(14), width: getHorizontalSize(11), alignment: Alignment.center)])))]))), Align(alignment: Alignment.center, child: Padding(padding: getPadding(top: 16), child: RichText(text: TextSpan(children: [TextSpan(text: "msg_already_have_an2".tr, style: CustomTextStyles.bodySmallPoppins), TextSpan(text: " ", style: CustomTextStyles.labelMediumPoppinsMedium)]), textAlign: TextAlign.left))), Align(alignment: Alignment.center, child: GestureDetector(onTap: () {onTapTxtLogin(context);}, child: Padding(padding: getPadding(top: 15, bottom: 20), child: Text("lbl_log_in".tr, overflow: TextOverflow.ellipsis, textAlign: TextAlign.left, style: theme.textTheme.labelLarge))))]))]))))); } 
/// Navigates to the loginPageScreen when the action is triggered.
///
/// The [BuildContext] parameter is used to build the navigation stack.
/// When the action is triggered, this function uses the `NavigatorService`
/// to push the named route for the loginPageScreen.
Nav(BuildContext context) { NavigatorService.pushNamed(AppRoutes.loginPageScreen, ); } 
/// Navigates to the loginPageScreen when the action is triggered.
///
/// The [BuildContext] parameter is used to build the navigation stack.
/// When the action is triggered, this function uses the `NavigatorService`
/// to push the named route for the loginPageScreen.
onTapTxtLogin(BuildContext context) { NavigatorService.pushNamed(AppRoutes.loginPageScreen, ); } 
 }
