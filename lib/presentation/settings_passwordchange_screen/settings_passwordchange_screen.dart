import 'bloc/settings_passwordchange_bloc.dart';import 'models/settings_passwordchange_model.dart';import 'package:farmmart/core/app_export.dart';import 'package:farmmart/core/utils/validation_functions.dart';import 'package:farmmart/presentation/homepage_page/homepage_page.dart';import 'package:farmmart/presentation/order_details_page/order_details_page.dart';import 'package:farmmart/presentation/rice_page/rice_page.dart';import 'package:farmmart/widgets/custom_bottom_bar.dart';import 'package:farmmart/widgets/custom_elevated_button.dart';import 'package:farmmart/widgets/custom_text_form_field.dart';import 'package:flutter/material.dart';
// ignore_for_file: must_be_immutable
class SettingsPasswordchangeScreen extends StatelessWidget {SettingsPasswordchangeScreen({Key? key}) : super(key: key);

GlobalKey<NavigatorState> navigatorKey = GlobalKey();

GlobalKey<FormState> _formKey = GlobalKey<FormState>();

static Widget builder(BuildContext context) { return BlocProvider<SettingsPasswordchangeBloc>(create: (context) => SettingsPasswordchangeBloc(SettingsPasswordchangeState(settingsPasswordchangeModelObj: SettingsPasswordchangeModel()))..add(SettingsPasswordchangeInitialEvent()), child: SettingsPasswordchangeScreen()); } 
@override Widget build(BuildContext context) { mediaQueryData = MediaQuery.of(context); return SafeArea(child: Scaffold(backgroundColor: theme.colorScheme.onPrimary.withOpacity(1), resizeToAvoidBottomInset: false, body: Form(key: _formKey, child: SizedBox(height: getVerticalSize(792), width: double.maxFinite, child: Stack(alignment: Alignment.center, children: [Align(alignment: Alignment.topCenter, child: Padding(padding: getPadding(left: 7, top: 15, right: 8), child: Column(mainAxisSize: MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start, mainAxisAlignment: MainAxisAlignment.start, children: [Container(height: getVerticalSize(69), width: getHorizontalSize(67), margin: getMargin(left: 8), decoration: BoxDecoration(color: theme.colorScheme.onPrimary.withOpacity(1), borderRadius: BorderRadius.circular(getHorizontalSize(34)), border: Border.all(color: appTheme.lime900, width: getHorizontalSize(14)))), Padding(padding: getPadding(top: 36), child: Text("lbl_settings".tr, overflow: TextOverflow.ellipsis, textAlign: TextAlign.left, style: theme.textTheme.displaySmall)), BlocSelector<SettingsPasswordchangeBloc, SettingsPasswordchangeState, TextEditingController?>(selector: (state) => state.nameController, builder: (context, nameController) {return CustomTextFormField(controller: nameController, margin: getMargin(top: 34), contentPadding: getPadding(left: 15, top: 17, right: 15, bottom: 17), textStyle: CustomTextStyles.bodySmallGray500, hintText: "msg_name_date_of_birth".tr, hintStyle: CustomTextStyles.bodySmallGray500, textInputAction: TextInputAction.next, validator: (value) {if (!isText(value)) {return "Please enter valid text";} return null;}, defaultBorderDecoration: TextFormFieldStyleHelper.underLineGray500, enabledBorderDecoration: TextFormFieldStyleHelper.underLineGray500, focusedBorderDecoration: TextFormFieldStyleHelper.underLineGray500, disabledBorderDecoration: TextFormFieldStyleHelper.underLineGray500);}), BlocSelector<SettingsPasswordchangeBloc, SettingsPasswordchangeState, TextEditingController?>(selector: (state) => state.passwordController, builder: (context, passwordController) {return CustomTextFormField(controller: passwordController, margin: getMargin(top: 18), contentPadding: getPadding(left: 15, top: 17, right: 15, bottom: 17), textStyle: CustomTextStyles.bodySmallGray500, hintText: "msg_password_settings".tr, hintStyle: CustomTextStyles.bodySmallGray500, textInputAction: TextInputAction.next, textInputType: TextInputType.visiblePassword, validator: (value) {if (value == null || (!isValidPassword(value, isRequired: true))) {return "Please enter valid password";} return null;}, obscureText: true, defaultBorderDecoration: TextFormFieldStyleHelper.underLineGray500, enabledBorderDecoration: TextFormFieldStyleHelper.underLineGray500, focusedBorderDecoration: TextFormFieldStyleHelper.underLineGray500, disabledBorderDecoration: TextFormFieldStyleHelper.underLineGray500);}), BlocSelector<SettingsPasswordchangeBloc, SettingsPasswordchangeState, TextEditingController?>(selector: (state) => state.emailController, builder: (context, emailController) {return CustomTextFormField(controller: emailController, margin: getMargin(top: 18), contentPadding: getPadding(left: 15, top: 18, right: 15, bottom: 18), textStyle: CustomTextStyles.bodySmallGray500, hintText: "msg_email_notifications".tr, hintStyle: CustomTextStyles.bodySmallGray500, textInputAction: TextInputAction.next, textInputType: TextInputType.emailAddress, validator: (value) {if (value == null || (!isValidEmail(value, isRequired: true))) {return "Please enter valid email";} return null;}, defaultBorderDecoration: TextFormFieldStyleHelper.underLineGray500, enabledBorderDecoration: TextFormFieldStyleHelper.underLineGray500, focusedBorderDecoration: TextFormFieldStyleHelper.underLineGray500, disabledBorderDecoration: TextFormFieldStyleHelper.underLineGray500);})]))), Align(alignment: Alignment.center, child: Container(decoration: AppDecoration.fill3, child: Column(mainAxisSize: MainAxisSize.min, mainAxisAlignment: MainAxisAlignment.end, children: [Spacer(), Container(padding: getPadding(left: 16, top: 13, right: 16, bottom: 13), decoration: AppDecoration.outline7.copyWith(borderRadius: BorderRadiusStyle.customBorderTL34), child: Column(mainAxisSize: MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start, mainAxisAlignment: MainAxisAlignment.start, children: [SizedBox(width: getHorizontalSize(62), child: Divider(height: getVerticalSize(5), thickness: getVerticalSize(5), color: appTheme.gray500)), Align(alignment: Alignment.center, child: Padding(padding: getPadding(top: 17), child: Text("lbl_password_change".tr, overflow: TextOverflow.ellipsis, textAlign: TextAlign.left, style: CustomTextStyles.titleMedium18))), BlocSelector<SettingsPasswordchangeBloc, SettingsPasswordchangeState, TextEditingController?>(selector: (state) => state.passwordoneController, builder: (context, passwordoneController) {return CustomTextFormField(controller: passwordoneController, margin: getMargin(top: 17), contentPadding: getPadding(left: 20, top: 22, right: 20, bottom: 22), textStyle: CustomTextStyles.titleSmallGray500, hintText: "lbl_old_password".tr, hintStyle: CustomTextStyles.titleSmallGray500, textInputAction: TextInputAction.next, textInputType: TextInputType.visiblePassword, validator: (value) {if (value == null || (!isValidPassword(value, isRequired: true))) {return "Please enter valid password";} return null;}, obscureText: true, filled: true, fillColor: theme.colorScheme.onPrimary.withOpacity(1));}), Align(alignment: Alignment.centerRight, child: Padding(padding: getPadding(top: 16, right: 4), child: Text("msg_forgot_password".tr, overflow: TextOverflow.ellipsis, textAlign: TextAlign.left, style: CustomTextStyles.titleSmallGray500))), BlocSelector<SettingsPasswordchangeBloc, SettingsPasswordchangeState, TextEditingController?>(selector: (state) => state.newpasswordController, builder: (context, newpasswordController) {return CustomTextFormField(controller: newpasswordController, margin: getMargin(top: 18, right: 10), contentPadding: getPadding(left: 20, top: 26, right: 20, bottom: 26), textStyle: CustomTextStyles.titleSmallGray500, hintText: "lbl_new_password".tr, hintStyle: CustomTextStyles.titleSmallGray500, textInputAction: TextInputAction.next, textInputType: TextInputType.visiblePassword, validator: (value) {if (value == null || (!isValidPassword(value, isRequired: true))) {return "Please enter valid password";} return null;}, obscureText: true, filled: true, fillColor: theme.colorScheme.onPrimary.withOpacity(1));}), BlocSelector<SettingsPasswordchangeBloc, SettingsPasswordchangeState, TextEditingController?>(selector: (state) => state.newpasswordoneController, builder: (context, newpasswordoneController) {return CustomTextFormField(controller: newpasswordoneController, margin: getMargin(top: 25, right: 10), contentPadding: getPadding(left: 20, top: 26, right: 20, bottom: 26), textStyle: CustomTextStyles.titleSmallGray500, hintText: "msg_repeat_new_password".tr, hintStyle: CustomTextStyles.titleSmallGray500, textInputType: TextInputType.visiblePassword, validator: (value) {if (value == null || (!isValidPassword(value, isRequired: true))) {return "Please enter valid password";} return null;}, obscureText: true, filled: true, fillColor: theme.colorScheme.onPrimary.withOpacity(1));}), CustomElevatedButton(text: "lbl_save_password".tr, margin: getMargin(top: 52, bottom: 24), buttonStyle: CustomButtonStyles.outlineSecondaryContainerTL23.copyWith(fixedSize: MaterialStateProperty.all<Size>(Size(double.maxFinite, getVerticalSize(44)))), buttonTextStyle: CustomTextStyles.titleSmallOnPrimary, onTap: () {onTapSavepassword(context);})]))])))]))), bottomNavigationBar: CustomBottomBar(onChanged: (BottomBarEnum type) {Navigator.pushNamed(navigatorKey.currentContext!, getCurrentRoute(type));}))); } 
///Handling route based on bottom click actions
String getCurrentRoute(BottomBarEnum type) { switch (type) {case BottomBarEnum.Home: return AppRoutes.homepagePage; case BottomBarEnum.Shop: return AppRoutes.ricePage; case BottomBarEnum.Favorites: return "/"; case BottomBarEnum.Profile: return AppRoutes.orderDetailsPage; default: return "/";} } 
///Handling page based on route
Widget getCurrentPage(BuildContext context, String currentRoute, ) { switch (currentRoute) {case AppRoutes.homepagePage: return HomepagePage.builder(context); case AppRoutes.ricePage: return RicePage.builder(context); case AppRoutes.orderDetailsPage: return OrderDetailsPage.builder(context); default: return DefaultWidget();} } 
/// Navigates to the iphone1313ProNineteenScreen when the action is triggered.
///
/// The [BuildContext] parameter is used to build the navigation stack.
/// When the action is triggered, this function uses the `NavigatorService`
/// to push the named route for the iphone1313ProNineteenScreen.
onTapSavepassword(BuildContext context) { NavigatorService.pushNamed(AppRoutes.iphone1313ProNineteenScreen, ); } 
 }
