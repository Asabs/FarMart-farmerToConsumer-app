import 'bloc/adding_shipping_address_bloc.dart';import 'models/adding_shipping_address_model.dart';import 'package:farmmart/core/app_export.dart';import 'package:farmmart/core/utils/validation_functions.dart';import 'package:farmmart/presentation/homepage_page/homepage_page.dart';import 'package:farmmart/presentation/order_details_page/order_details_page.dart';import 'package:farmmart/presentation/rice_page/rice_page.dart';import 'package:farmmart/widgets/app_bar/appbar_image.dart';import 'package:farmmart/widgets/app_bar/appbar_subtitle.dart';import 'package:farmmart/widgets/app_bar/custom_app_bar.dart';import 'package:farmmart/widgets/custom_bottom_bar.dart';import 'package:farmmart/widgets/custom_elevated_button.dart';import 'package:farmmart/widgets/custom_floating_text_field.dart';import 'package:flutter/material.dart';
// ignore_for_file: must_be_immutable
class AddingShippingAddressScreen extends StatelessWidget {AddingShippingAddressScreen({Key? key}) : super(key: key);

GlobalKey<NavigatorState> navigatorKey = GlobalKey();

GlobalKey<FormState> _formKey = GlobalKey<FormState>();

static Widget builder(BuildContext context) { return BlocProvider<AddingShippingAddressBloc>(create: (context) => AddingShippingAddressBloc(AddingShippingAddressState(addingShippingAddressModelObj: AddingShippingAddressModel()))..add(AddingShippingAddressInitialEvent()), child: AddingShippingAddressScreen()); } 
@override Widget build(BuildContext context) { mediaQueryData = MediaQuery.of(context); return BlocBuilder<AddingShippingAddressBloc, AddingShippingAddressState>(builder: (context, state) {return SafeArea(child: Scaffold(backgroundColor: theme.colorScheme.onPrimary.withOpacity(1), resizeToAvoidBottomInset: false, appBar: CustomAppBar(height: getVerticalSize(172), leadingWidth: 40, leading: AppbarImage(height: getSize(24), width: getSize(24), svgPath: ImageConstant.imgArrowleft, margin: getMargin(left: 16, top: 52, bottom: 12), onTap: () {onTapArrowleft3(context);}), centerTitle: true, title: AppbarSubtitle(text: "msg_adding_shipping".tr, margin: getMargin(top: 56, bottom: 13)), styleType: Style.bgShadow_1), body: Form(key: _formKey, child: Container(width: double.maxFinite, padding: getPadding(left: 15, right: 15), child: Column(crossAxisAlignment: CrossAxisAlignment.start, mainAxisAlignment: MainAxisAlignment.start, children: [Container(height: getVerticalSize(69), width: getHorizontalSize(67), decoration: BoxDecoration(color: theme.colorScheme.onPrimary.withOpacity(1), borderRadius: BorderRadius.circular(getHorizontalSize(34)), border: Border.all(color: appTheme.lime900, width: getHorizontalSize(14)))), Spacer(), BlocSelector<AddingShippingAddressBloc, AddingShippingAddressState, TextEditingController?>(selector: (state) => state.fullnameController, builder: (context, fullnameController) {return CustomFloatingTextField(margin: getMargin(left: 10, right: 7), controller: fullnameController, textStyle: CustomTextStyles.titleSmallGray500, hintText: "lbl_full_name3".tr, hintStyle: CustomTextStyles.titleSmallGray500, labelText: "lbl_full_name3".tr, labelStyle: CustomTextStyles.titleSmallGray500, textInputAction: TextInputAction.next, filled: true, fillColor: theme.colorScheme.onPrimary.withOpacity(1), contentPadding: getPadding(left: 20, top: 24, right: 20, bottom: 25), validator: (value) {if (!isText(value)) {return "Please enter valid text";} return null;});}), BlocSelector<AddingShippingAddressBloc, AddingShippingAddressState, TextEditingController?>(selector: (state) => state.addressController, builder: (context, addressController) {return CustomFloatingTextField(margin: getMargin(left: 9, top: 20, right: 8), controller: addressController, textStyle: CustomTextStyles.bodyMediumMetropolisGray900, hintText: "lbl_address".tr, hintStyle: CustomTextStyles.bodyMediumMetropolisGray900, labelText: "lbl_address".tr, labelStyle: CustomTextStyles.bodyMediumMetropolisGray900, textInputAction: TextInputAction.next, filled: true, fillColor: theme.colorScheme.onPrimary.withOpacity(1), contentPadding: getPadding(left: 20, top: 33, right: 20, bottom: 16));}), BlocSelector<AddingShippingAddressBloc, AddingShippingAddressState, TextEditingController?>(selector: (state) => state.cityController, builder: (context, cityController) {return CustomFloatingTextField(margin: getMargin(left: 9, top: 20, right: 8), controller: cityController, textStyle: CustomTextStyles.bodyMediumMetropolisGray900, hintText: "lbl_city".tr, hintStyle: CustomTextStyles.bodyMediumMetropolisGray900, labelText: "lbl_city".tr, labelStyle: CustomTextStyles.bodyMediumMetropolisGray900, textInputAction: TextInputAction.next, filled: true, fillColor: theme.colorScheme.onPrimary.withOpacity(1), contentPadding: getPadding(left: 20, top: 32, right: 20, bottom: 17));}), Container(width: getHorizontalSize(343), margin: getMargin(left: 10, top: 20, right: 7), padding: getPadding(left: 20, top: 14, right: 20, bottom: 14), decoration: AppDecoration.outline8.copyWith(borderRadius: BorderRadiusStyle.roundedBorder4), child: Column(mainAxisSize: MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start, mainAxisAlignment: MainAxisAlignment.center, children: [Text("msg_state_province_region".tr, overflow: TextOverflow.ellipsis, textAlign: TextAlign.left, style: CustomTextStyles.bodySmallGray500), Padding(padding: getPadding(top: 6, bottom: 3), child: Text("lbl_california".tr, overflow: TextOverflow.ellipsis, textAlign: TextAlign.left, style: CustomTextStyles.bodyMediumMetropolisGray900))])), BlocSelector<AddingShippingAddressBloc, AddingShippingAddressState, TextEditingController?>(selector: (state) => state.zipcodeController, builder: (context, zipcodeController) {return CustomFloatingTextField(margin: getMargin(left: 9, top: 20, right: 8), controller: zipcodeController, textStyle: CustomTextStyles.bodyMediumMetropolisGray900, hintText: "msg_zip_code_postal".tr, hintStyle: CustomTextStyles.bodyMediumMetropolisGray900, labelText: "msg_zip_code_postal".tr, labelStyle: CustomTextStyles.bodyMediumMetropolisGray900, textInputAction: TextInputAction.next, textInputType: TextInputType.number, filled: true, fillColor: theme.colorScheme.onPrimary.withOpacity(1), contentPadding: getPadding(left: 20, top: 32, right: 20, bottom: 17), validator: (value) {if (!isNumeric(value)) {return "Please enter valid number";} return null;});}), BlocSelector<AddingShippingAddressBloc, AddingShippingAddressState, TextEditingController?>(selector: (state) => state.countryController, builder: (context, countryController) {return CustomFloatingTextField(margin: getMargin(left: 8, top: 20, right: 9), controller: countryController, textStyle: CustomTextStyles.bodyMediumMetropolisGray900, hintText: "lbl_country".tr, hintStyle: CustomTextStyles.bodyMediumMetropolisGray900, labelText: "lbl_country".tr, labelStyle: CustomTextStyles.bodyMediumMetropolisGray900, filled: true, fillColor: theme.colorScheme.onPrimary.withOpacity(1), contentPadding: getPadding(left: 20, top: 32, right: 20, bottom: 17));}), CustomElevatedButton(text: "lbl_save_address".tr, margin: getMargin(left: 9, top: 40, right: 8, bottom: 13), buttonStyle: CustomButtonStyles.outlineSecondaryContainerTL23.copyWith(fixedSize: MaterialStateProperty.all<Size>(Size(double.maxFinite, getVerticalSize(48)))), buttonTextStyle: CustomTextStyles.titleSmallOnPrimary, onTap: () {onTapSaveaddress(context);})]))), bottomNavigationBar: CustomBottomBar(onChanged: (BottomBarEnum type) {Navigator.pushNamed(navigatorKey.currentContext!, getCurrentRoute(type));})));}); } 
///Handling route based on bottom click actions
String getCurrentRoute(BottomBarEnum type) { switch (type) {case BottomBarEnum.Home: return AppRoutes.homepagePage; case BottomBarEnum.Shop: return AppRoutes.ricePage; case BottomBarEnum.Favorites: return "/"; case BottomBarEnum.Profile: return AppRoutes.orderDetailsPage; default: return "/";} } 
///Handling page based on route
Widget getCurrentPage(BuildContext context, String currentRoute, ) { switch (currentRoute) {case AppRoutes.homepagePage: return HomepagePage.builder(context); case AppRoutes.ricePage: return RicePage.builder(context); case AppRoutes.orderDetailsPage: return OrderDetailsPage.builder(context); default: return DefaultWidget();} } 


/// Navigates to the previous screen.
///
/// This function takes a [BuildContext] object as a parameter, which is
/// used to build the navigation stack. When the action is triggered, this
/// function uses the [NavigatorService] to navigate to the previous screen
/// in the navigation stack.
onTapArrowleft3(BuildContext context) { NavigatorService.goBack(); } 
/// Navigates to the shippingAddressesScreen when the action is triggered.
///
/// The [BuildContext] parameter is used to build the navigation stack.
/// When the action is triggered, this function uses the `NavigatorService`
/// to push the named route for the shippingAddressesScreen.
onTapSaveaddress(BuildContext context) { NavigatorService.pushNamed(AppRoutes.shippingAddressesScreen, ); } 
 }
