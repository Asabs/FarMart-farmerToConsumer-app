import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      colorScheme: colorScheme,
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Color(0XFFFFFFFF),
          shape: RoundedRectangleBorder(
            side: BorderSide(
              color: appTheme.gray900,
              width: 1,
            ),
            borderRadius: BorderRadius.circular(
              18,
            ),
          ),
        ),
      ),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(
              23,
            ),
          ),
          shadowColor: colorScheme.secondaryContainer,
          elevation: 4,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: appTheme.gray900,
      ),
      textTheme: TextTheme(
        headlineLarge: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(
            30,
          ),
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
        bodyMedium: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(
            15,
          ),
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(
            10,
          ),
          fontFamily: 'Metropolis',
          fontWeight: FontWeight.w400,
        ),
        labelMedium: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(
            10,
          ),
          fontFamily: 'Metropolis',
          fontWeight: FontWeight.w600,
        ),
        titleMedium: TextStyle(
          color: appTheme.gray900,
          fontSize: getFontSize(
            16,
          ),
          fontFamily: 'Metropolis',
          fontWeight: FontWeight.w600,
        ),
        bodyLarge: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(
            17,
          ),
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        displayLarge: TextStyle(
          color: appTheme.lime900,
          fontSize: getFontSize(
            64,
          ),
          fontFamily: 'ABeeZee',
          fontWeight: FontWeight.w400,
        ),
        titleSmall: TextStyle(
          color: appTheme.gray900,
          fontSize: getFontSize(
            14,
          ),
          fontFamily: 'Metropolis',
          fontWeight: FontWeight.w500,
        ),
        labelSmall: TextStyle(
          color: appTheme.gray50001,
          fontSize: getFontSize(
            8,
          ),
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: colorScheme.onPrimaryContainer,
          fontSize: getFontSize(
            22,
          ),
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        labelLarge: TextStyle(
          color: appTheme.teal400,
          fontSize: getFontSize(
            12,
          ),
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.onPrimary.withOpacity(1),
          fontSize: getFontSize(
            24,
          ),
          fontFamily: 'Metropolis',
          fontWeight: FontWeight.w600,
        ),
        displaySmall: TextStyle(
          color: appTheme.gray900,
          fontSize: getFontSize(
            34,
          ),
          fontFamily: 'Metropolis',
          fontWeight: FontWeight.w700,
        ),
      ),
      visualDensity: VisualDensity.standard,
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    background: Color(0XA2FFFFFF),
    error: Color(0XA2FFFFFF),
    errorContainer: Color(0X3FD32525),
    inversePrimary: Color(0XA2FFFFFF),
    inverseSurface: Color(0XA2FFFFFF),
    onBackground: Color(0XFF292D32),
    onError: Color(0XFF292D32),
    onErrorContainer: Color(0XA2FFFFFF),
    onInverseSurface: Color(0XFF292D32),
    onPrimary: Color(0XA2FFFFFF),
    onPrimaryContainer: Color(0XFF292D32),
    onSecondary: Color(0XFF292D32),
    onSecondaryContainer: Color(0XA2FFFFFF),
    onSurface: Color(0XFF292D32),
    onSurfaceVariant: Color(0XA2FFFFFF),
    onTertiary: Color(0XFF292D32),
    onTertiaryContainer: Color(0XA2FFFFFF),
    outline: Color(0XA2FFFFFF),
    outlineVariant: Color(0XA2FFFFFF),
    primary: Color(0XFFDB3022),
    primaryContainer: Color(0XA2FFFFFF),
    scrim: Color(0XA2FFFFFF),
    secondary: Color(0XA2FFFFFF),
    secondaryContainer: Color(0X3FD32525),
    shadow: Color(0XA2FFFFFF),
    surface: Color(0XA2FFFFFF),
    surfaceTint: Color(0XA2FFFFFF),
    surfaceVariant: Color(0X3FD32525),
    tertiary: Color(0XA2FFFFFF),
    tertiaryContainer: Color(0X3FD32525),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber500 => Color(0XFFFFC107);
  // Black
  Color get black900 => Color(0XFF000000);
  // BlueGray
  Color get blueGray100 => Color(0XFFD2CECE);
  Color get blueGray10001 => Color(0XFFD2CDCD);
  Color get blueGray200 => Color(0XFFB3BFCB);
  Color get blueGray400 => Color(0XFF888888);
  Color get blueGray50 => Color(0XFFEFF2F5);
  // DeepOrange
  Color get deepOrange300 => Color(0XFFE9985B);
  Color get deepOrangeA400 => Color(0XFFFF3D00);
  // Gray
  Color get gray200 => Color(0XFFF0F0F0);
  Color get gray50 => Color(0XFFF8F8F8);
  Color get gray500 => Color(0XFF9B9B9B);
  Color get gray50001 => Color(0XFFA6A0A0);
  Color get gray800 => Color(0XFF444444);
  Color get gray900 => Color(0XFF222222);
  // Green
  Color get green600 => Color(0XFF2AA952);
  // LightBlue
  Color get lightBlue300 => Color(0XFF45B7E8);
  // Lime
  Color get lime900 => Color(0XFF728E09);
  // Orange
  Color get orange300 => Color(0XFFFFBA48);
  // Teal
  Color get teal400 => Color(0XFF3FB283);
  // Yellow
  Color get yellow800 => Color(0XFFF79E1B);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
